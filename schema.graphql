# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  race: Race
  coins: Int
  adminRole: String
  userRole: String
  isAdmin: Boolean
  isEditor: Boolean
  isUser: Boolean
  isPending: Boolean
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommentWhereUniqueInput): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  name: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  race: RaceWhereInput
  coins: IntNullableFilter
  adminRole: StringNullableFilter
  userRole: StringNullableFilter
  posts: PostManyRelationFilter
  comments: CommentManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input CommentManyRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  coins: OrderDirection
  adminRole: OrderDirection
  userRole: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  race: RaceRelateToOneForUpdateInput
  coins: Int
  adminRole: String
  userRole: String
  posts: PostRelateToManyForUpdateInput
  comments: CommentRelateToManyForUpdateInput
  createdAt: DateTime
}

input RaceRelateToOneForUpdateInput {
  create: RaceCreateInput
  connect: RaceWhereUniqueInput
  disconnect: Boolean
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input CommentRelateToManyForUpdateInput {
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  race: RaceRelateToOneForCreateInput
  coins: Int
  adminRole: String
  userRole: String
  posts: PostRelateToManyForCreateInput
  comments: CommentRelateToManyForCreateInput
  createdAt: DateTime
}

input RaceRelateToOneForCreateInput {
  create: RaceCreateInput
  connect: RaceWhereUniqueInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input CommentRelateToManyForCreateInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  state: String
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommentWhereUniqueInput): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  createdAt: DateTime
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
  title: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  state: StringNullableFilter
  comments: CommentManyRelationFilter
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  state: OrderDirection
  createdAt: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  state: String
  comments: CommentRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  createdAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  state: String
  comments: CommentRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  createdAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Comment {
  id: ID!
  name: String
  content: Comment_content_Document
  author: User
  isDeleted: Boolean
  createdAt: DateTime
}

type Comment_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  name: StringFilter
  author: UserWhereInput
  isDeleted: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input CommentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  isDeleted: OrderDirection
  createdAt: OrderDirection
}

input CommentUpdateInput {
  name: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  isDeleted: Boolean
  createdAt: DateTime
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  name: String
  content: JSON
  author: UserRelateToOneForCreateInput
  isDeleted: Boolean
  createdAt: DateTime
}

type Race {
  id: ID!
  name: String
  races: String
  image: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input RaceWhereUniqueInput {
  id: ID
  name: String
}

input RaceWhereInput {
  AND: [RaceWhereInput!]
  OR: [RaceWhereInput!]
  NOT: [RaceWhereInput!]
  id: IDFilter
  name: StringFilter
  races: StringFilter
}

input RaceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  races: OrderDirection
}

input RaceUpdateInput {
  name: String
  races: String
  image: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input RaceUpdateArgs {
  where: RaceWhereUniqueInput!
  data: RaceUpdateInput!
}

input RaceCreateInput {
  name: String
  races: String
  image: ImageFieldInput
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Log {
  id: ID!
  who: String
  what: Log_what_Document
  when: DateTime
}

type Log_what_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input LogWhereUniqueInput {
  id: ID
}

input LogWhereInput {
  AND: [LogWhereInput!]
  OR: [LogWhereInput!]
  NOT: [LogWhereInput!]
  id: IDFilter
  who: StringFilter
  when: DateTimeNullableFilter
}

input LogOrderByInput {
  id: OrderDirection
  who: OrderDirection
  when: OrderDirection
}

input LogUpdateInput {
  who: String
  what: JSON
  when: DateTime
}

input LogUpdateArgs {
  where: LogWhereUniqueInput!
  data: LogUpdateInput!
}

input LogCreateInput {
  who: String
  what: JSON
  when: DateTime
}

type Poll {
  id: ID!
  title: String
  optionsWithVotesAtStart: JSON
  optionsWithVotesAtEnd: JSON
  dueDate: String
  createdAt: DateTime
}

input PollWhereUniqueInput {
  id: ID
}

input PollWhereInput {
  AND: [PollWhereInput!]
  OR: [PollWhereInput!]
  NOT: [PollWhereInput!]
  id: IDFilter
  title: StringFilter
  dueDate: StringFilter
  createdAt: DateTimeNullableFilter
}

input PollOrderByInput {
  id: OrderDirection
  title: OrderDirection
  dueDate: OrderDirection
  createdAt: OrderDirection
}

input PollUpdateInput {
  title: String
  optionsWithVotesAtStart: JSON
  optionsWithVotesAtEnd: JSON
  dueDate: String
  createdAt: DateTime
}

input PollUpdateArgs {
  where: PollWhereUniqueInput!
  data: PollUpdateInput!
}

input PollCreateInput {
  title: String
  optionsWithVotesAtStart: JSON
  optionsWithVotesAtEnd: JSON
  dueDate: String
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(where: CommentWhereUniqueInput!, data: CommentUpdateInput!): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  createRace(data: RaceCreateInput!): Race
  createRaces(data: [RaceCreateInput!]!): [Race]
  updateRace(where: RaceWhereUniqueInput!, data: RaceUpdateInput!): Race
  updateRaces(data: [RaceUpdateArgs!]!): [Race]
  deleteRace(where: RaceWhereUniqueInput!): Race
  deleteRaces(where: [RaceWhereUniqueInput!]!): [Race]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createLog(data: LogCreateInput!): Log
  createLogs(data: [LogCreateInput!]!): [Log]
  updateLog(where: LogWhereUniqueInput!, data: LogUpdateInput!): Log
  updateLogs(data: [LogUpdateArgs!]!): [Log]
  deleteLog(where: LogWhereUniqueInput!): Log
  deleteLogs(where: [LogWhereUniqueInput!]!): [Log]
  createPoll(data: PollCreateInput!): Poll
  createPolls(data: [PollCreateInput!]!): [Poll]
  updatePoll(where: PollWhereUniqueInput!, data: PollUpdateInput!): Poll
  updatePolls(data: [PollUpdateArgs!]!): [Poll]
  deletePoll(where: PollWhereUniqueInput!): Poll
  deletePolls(where: [PollWhereUniqueInput!]!): [Poll]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommentWhereUniqueInput): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  races(where: RaceWhereInput! = {}, orderBy: [RaceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RaceWhereUniqueInput): [Race!]
  race(where: RaceWhereUniqueInput!): Race
  racesCount(where: RaceWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  logs(where: LogWhereInput! = {}, orderBy: [LogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LogWhereUniqueInput): [Log!]
  log(where: LogWhereUniqueInput!): Log
  logsCount(where: LogWhereInput! = {}): Int
  polls(where: PollWhereInput! = {}, orderBy: [PollOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PollWhereUniqueInput): [Poll!]
  poll(where: PollWhereUniqueInput!): Poll
  pollsCount(where: PollWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
